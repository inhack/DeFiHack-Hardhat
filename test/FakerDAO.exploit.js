const { expect } = require("chai");
const { ethers } = require("hardhat");
//const { web3 } = require("web3");

const pairJson = require("@uniswap/v2-core/build/UniswapV2Pair.json");
// https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2Pair.sol
const factoryJson = require("@uniswap/v2-core/build/UniswapV2Factory.json");
// https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2Factory.sol
const routerJson = require("@uniswap/v2-periphery/build/UniswapV2Router02.json");
const { t } = require("tar");
// https://github.com/Uniswap/v2-periphery/blob/master/contracts/UniswapV2Router02.sol

describe("FakerDAO Challenge", function () {

  before(async function () {
    [deployer, attacker, temp] = await ethers.getSigners();

    const UniswapFactoryFactory = new ethers.ContractFactory(factoryJson.abi, factoryJson.bytecode, deployer);
    const UniswapRouterFactory = new ethers.ContractFactory(routerJson.abi, routerJson.bytecode, deployer);

    // Deploy tokens to be traded
    this.weth = await (await ethers.getContractFactory('WETH9', deployer)).deploy();

    // Deploy Uniswap Factory and Router
    this.uniswap_factory = await UniswapFactoryFactory.deploy(ethers.constants.AddressZero);
    this.uniswap_router = await UniswapRouterFactory.deploy(
        this.uniswap_factory.address,
        this.weth.address
    );

    const FakerDAOFactoryFactory = await ethers.getContractFactory("FakerDAOFactory", attacker);
    this.fakerdao_factory = await FakerDAOFactoryFactory.deploy();
    await this.fakerdao_factory.createInstance(this.uniswap_factory.address, this.uniswap_router.address);
    let fakerdao_addr = await this.fakerdao_factory.fakerdao();

    const FakerDaoFactory = await ethers.getContractFactory("FakerDAO", deployer);
    this.fakerdao = await FakerDaoFactory.attach(fakerdao_addr);

    console.log("FakerDAO Contract Address : ", this.fakerdao.address);

  });

  it('Exploit', async function () {
    // liquidity supply test
    // await this.yin_token.connect(attacker).approve(this.uniswap_router.address, ethers.utils.parseEther("5000"));
    // await this.yang_token.connect(attacker).approve(this.uniswap_router.address, ethers.utils.parseEther("5000"));
    // let timestamp = (await ethers.provider.getBlock('latest')).timestamp * 2;
    // await this.uniswap_router.connect(attacker).addLiquidity(this.yin_token.address, this.yang_token.address, ethers.utils.parseEther("5000"), ethers.utils.parseEther("5000"), 1, 1, attacker.address, timestamp);


    let pair_addr = await this.fakerdao.pair();
    const UniswapPairFactory = new ethers.ContractFactory(pairJson.abi, pairJson.bytecode, deployer);
    this.pair = await UniswapPairFactory.attach(pair_addr);   // LAMBO

    // erc20 YIN / YANG
    const ERC20Factory = await ethers.getContractFactory("ERC20", deployer);
    this.yin_token = await ERC20Factory.attach(await this.pair.token0());
    this.yang_token = await ERC20Factory.attach(await this.pair.token1());

    const FakerDAOExploitFactory = await ethers.getContractFactory("FakerDAOExploit", attacker);
    this.exploit = await FakerDAOExploitFactory.deploy(this.fakerdao.address, this.pair.address);

    const ATTACKER_BALANCE = ethers.utils.parseEther("5000");
    await this.yin_token.connect(attacker).transfer(this.exploit.address, ATTACKER_BALANCE);
    await this.yang_token.connect(attacker).transfer(this.exploit.address, ATTACKER_BALANCE);

    await this.exploit.exploit();


    
    // Attacker Balance
    console.log("Attacker BalanceOf");
    console.log("YIN Token :", await this.yin_token.balanceOf(attacker.address));    // 5000 * 10 ** 18
    console.log("YANG Token :", await this.yang_token.balanceOf(attacker.address));    // 5000 * 10 ** 18
    console.log("LAMBO Token :", await this.fakerdao.balanceOf(attacker.address));       // 0
    console.log("Pair Token :", await this.pair.balanceOf(attacker.address));       // 0

    // Pair BalanceOf
    console.log("Pair BalanceOf");
    console.log("YIN Token :", await this.yin_token.balanceOf(this.pair.address));    // 1000000 * 10 ** 18
    console.log("YANG Token :", await this.yang_token.balanceOf(this.pair.address));    // 1000000 * 10 ** 18
    console.log("LAMBO Token :", await this.fakerdao.balanceOf(this.pair.address));       // 0
    console.log("Pair Token :", await this.pair.balanceOf(this.pair.address));       // 0
    
    // FakerDAO BalanceOf
    console.log("FakerDAO Balance")
    console.log("YIN Token :", await this.yin_token.balanceOf(this.fakerdao.address));    // 1000000 * 10 ** 18
    console.log("YANG Token :", await this.yang_token.balanceOf(this.fakerdao.address));    // 1000000 * 10 ** 18
    console.log("LAMBO Token :", await this.fakerdao.balanceOf(this.fakerdao.address));       // 1000000 * 10 ** 18 - 1000 (999999999999999999999000)
    console.log("Pair Token :", await this.pair.balanceOf(this.fakerdao.address));       // 0

    // Exploit BalanceOf
    console.log("Exploit BalanceOf");
    console.log("YIN Token :", await this.yin_token.balanceOf(this.exploit.address));    // 1000000 * 10 ** 18
    console.log("YANG Token :", await this.yang_token.balanceOf(this.exploit.address));    // 1000000 * 10 ** 18
    console.log("LAMBO Token :", await this.fakerdao.balanceOf(this.exploit.address));       // 0
    console.log("Pair Token :", await this.pair.balanceOf(this.exploit.address));       // 0

  });

  after(async function () {
    // SUCCESS CONDITIONS
    expect(
      await this.fakerdao.balanceOf(attacker.address)
    ).to.be.gte(1)
  });
});